<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@2.40">
  <actions>
    <hudson.model.ParametersAction>
      <safeParameters class="sorted-set"/>
      <parameters>
        <hudson.model.StringParameterValue>
          <name>Version</name>
          <description></description>
          <value>develop</value>
        </hudson.model.StringParameterValue>
        <hudson.model.StringParameterValue>
          <name>Host_IP</name>
          <description></description>
          <value>20.36.1.155</value>
        </hudson.model.StringParameterValue>
      </parameters>
      <parameterDefinitionNames>
        <string>Version</string>
        <string>Host_IP</string>
      </parameterDefinitionNames>
    </hudson.model.ParametersAction>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>admin</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@2.18">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction plugin="pipeline-model-definition@1.8.4">
      <stagesUUID>2ed16ef9-1331-43a4-b953-3a3a5d000d36</stagesUUID>
      <pipelineDefs>
        <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef plugin="pipeline-model-api@1.8.4">
          <stages>
            <stages>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Pushing image to registry</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>sh</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>script</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">echo &quot;Start pushing image to registry&quot;</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            </stages>
            <uuid>2ed16ef9-1331-43a4-b953-3a3a5d000d36</uuid>
          </stages>
          <agent>
            <agentType>
              <key>any</key>
            </agentType>
          </agent>
        </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef>
      </pipelineDefs>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction>
  </actions>
  <queueId>65</queueId>
  <timestamp>1616134955993</timestamp>
  <startTime>1616134956004</startTime>
  <result>SUCCESS</result>
  <duration>5544</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>pipeline {
    agent any
    stages {
        stage(&apos;Pushing image to registry&apos;) {
            steps {
                sh &apos;echo &quot;Start pushing image to registry&quot;&apos;
            }
            // sh &apos;&apos;&apos;
            //     echo &quot;Pushing Backend&quot;
            //     docker push hoanht140589/hcmus:backend_$Version
            //     echo &quot;Pushing Frontend&quot;
            //     docker push hoanht140589/hcmus:frontend_$Version
            // &apos;&apos;&apos;
        }
        // node {
        //   def remote = [:]
        //   remote.name = &apos;test&apos;
        //   remote.host = $Host_IP
        //   remote.user = &apos;spadmin&apos;
        //   remote.password = &apos;SharpEar!&apos;
        //   remote.allowAnyHosts = true
        //   stage(&apos;Remote SSH&apos;) {
        //     // writeFile file: &apos;abc.sh&apos;, text: &apos;ls -lrt&apos;
        //     sshScript remote: remote, script: &quot;ls -la&quot;
        //   }
        // }
        // stage(&apos;Pushing image to remote host&apos;) {
        //         sshCommand remote: remote,sudo, command: &quot;docker pull hoanht140589/hcmus:backend_$version&quot;
        //         sshCommand remote: remote,sudo, command: &quot;docker pull hoanht140589/hcmus:frontend_$version&quot;
                
        // }
    }
}
</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>255060835</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>4590251578</long>
      </entry>
      <entry>
        <string>run</string>
        <long>4718106764</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>362596379</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>776834779</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>12</iota>
    <head>1:12</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>